Description:
  Fixes a directory or a file.

Usage:
  fix [options] [--] [<path>...]

Arguments:
  path                               The path.

Options:
      --path-mode=PATH-MODE          Specify path mode (can be override or intersection). [default: "override"]
      --allow-risky=ALLOW-RISKY      Are risky fixers allowed (can be yes or no).
      --config=CONFIG                The path to a .php_cs file.
      --dry-run                      Only shows which files would have been modified.
      --rules=RULES                  The rules.
      --using-cache=USING-CACHE      Does cache should be used (can be yes or no).
      --cache-file=CACHE-FILE        The path to the cache file.
      --diff                         Also produce diff for each file.
      --diff-format=DIFF-FORMAT      Specify diff format.
      --format=FORMAT                To output results in other formats.
      --stop-on-violation            Stop execution on first violation.
      --show-progress=SHOW-PROGRESS  Type of progress indicator (none, run-in, estimating, estimating-max or dots).
  -h, --help                         Display this help message
  -q, --quiet                        Do not output any message
  -V, --version                      Display this application version
      --ansi                         Force ANSI output
      --no-ansi                      Disable ANSI output
  -n, --no-interaction               Do not ask any interactive question
  -v|vv|vvv, --verbose               Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Help:
  The fix command tries to fix as much coding standards
  problems as possible on a given file or files in a given directory and its subdirectories:
  
      $ php vendor/bin/php-cs-fixer fix /path/to/dir
      $ php vendor/bin/php-cs-fixer fix /path/to/file
  
  By default --path-mode is set to ``override``, which means, that if you specify the path to a file or a directory via
  command arguments, then the paths provided to a ``Finder`` in config file will be ignored. You can use --path-mode=intersection
  to merge paths from the config file and from the argument:
  
      $ php vendor/bin/php-cs-fixer fix --path-mode=intersection /path/to/dir
  
  The --format option for the output format. Supported formats are ``txt`` (default one), ``json``, ``xml``, ``checkstyle``, ``junit`` and ``gitlab``.
  
  NOTE: the output for the following formats are generated in accordance with XML schemas
  
  * ``junit`` follows the `JUnit xml schema from Jenkins </doc/junit-10.xsd>`_
  * ``checkstyle`` follows the common `"checkstyle" xml schema </doc/checkstyle.xsd>`_
  
  
  The --verbose option will show the applied rules. When using the ``txt`` format it will also display progress notifications.
  
  The --rules option limits the rules to apply to the
  project:
  
      $ php vendor/bin/php-cs-fixer fix /path/to/project --rules=@PSR2
  
  By default the PSR1 and PSR2 rules are used.
  
  The --rules option lets you choose the exact rules to
  apply (the rule names must be separated by a comma):
  
      $ php vendor/bin/php-cs-fixer fix /path/to/dir --rules=line_ending,full_opening_tag,indentation_type
  
  You can also blacklist the rules you don't want by placing a dash in front of the rule name, if this is more convenient,
  using -name_of_fixer:
  
      $ php vendor/bin/php-cs-fixer fix /path/to/dir --rules=-full_opening_tag,-indentation_type
  
  When using combinations of exact and blacklist rules, applying exact rules along with above blacklisted results:
  
      $ php vendor/bin/php-cs-fixer fix /path/to/project --rules=@Symfony,-@PSR1,-blank_line_before_statement,strict_comparison
  
  Complete configuration for rules can be supplied using a ``json`` formatted string.
  
      $ php vendor/bin/php-cs-fixer fix /path/to/project --rules='{"concat_space": {"spacing": "none"}}'
  
  The --dry-run flag will run the fixer without making changes to your files.
  
  The --diff flag can be used to let the fixer output all the changes it makes.
  
  The --diff-format option allows to specify in which format the fixer should output the changes it makes:
  
  * udiff: unified diff format;
  * sbd: Sebastianbergmann/diff format (default when using `--diff` without specifying `diff-format`).
  
  The --allow-risky option (pass ``yes`` or ``no``) allows you to set whether risky rules may run. Default value is taken from config file.
  A rule is considered risky if it could change code behaviour. By default no risky rules are run.
  
  The --stop-on-violation flag stops the execution upon first file that needs to be fixed.
  
  The --show-progress option allows you to choose the way process progress is rendered:
  
  * none: disables progress output;
  * run-in: [deprecated] simple single-line progress output;
  * estimating: [deprecated] multiline progress output with number of files and percentage on each line. Note that with this option, the files list is evaluated before processing to get the total number of files and then kept in memory to avoid using the file iterator twice. This has an impact on memory usage so using this option is not recommended on very large projects;
  * estimating-max: [deprecated] same as dots;
  * dots: same as estimating but using all terminal columns instead of default 80.
  
  If the option is not provided, it defaults to run-in unless a config file that disables output is used, in which case it defaults to none. This option has no effect if the verbosity of the command is less than verbose.
  
      $ php vendor/bin/php-cs-fixer fix --verbose --show-progress=estimating
  
  The command can also read from standard input, in which case it won't
  automatically fix anything:
  
      $ cat foo.php | php vendor/bin/php-cs-fixer fix --diff -
  
  Finally, if you don't need BC kept on CLI level, you might use `PHP_CS_FIXER_FUTURE_MODE` to start using options that
  would be default in next MAJOR release (unified differ, estimating, full-width progress indicator):
  
      $ PHP_CS_FIXER_FUTURE_MODE=1 php vendor/bin/php-cs-fixer fix -v --diff
  
  Choose from the list of available rules:
  
   * align_multiline_comment [@PhpCsFixer]
     | Each line of multi-line DocComments must have an asterisk [PSR-5] and
     | must be aligned with the first one.
     |
     | Configuration options:
     | - comment_type ('all_multiline', 'phpdocs_like', 'phpdocs_only'): whether
     |   to fix PHPDoc comments only (`phpdocs_only`), any multi-line comment
     |   whose lines all start with an asterisk (`phpdocs_like`) or any
     |   multi-line comment (`all_multiline`); defaults to 'phpdocs_only'
  
   * array_indentation [@PhpCsFixer]
     | Each element of an array must be indented exactly once.
  
   * array_syntax [@Symfony, @PhpCsFixer]
     | PHP arrays should be declared using the configured syntax.
     |
     | Configuration options:
     | - syntax ('long', 'short'): whether to use the `long` or `short` array
     |   syntax; defaults to 'long'
  
   * backtick_to_shell_exec
     | Converts backtick operators to `shell_exec` calls.
  
   * binary_operator_spaces [@Symfony, @PhpCsFixer]
     | Binary operators should be surrounded by space as configured.
     |
     | Configuration options:
     | - align_double_arrow (false, null, true): whether to apply, remove or
     |   ignore double arrows alignment; defaults to false. DEPRECATED: use
     |   options `operators` and `default` instead
     | - align_equals (false, null, true): whether to apply, remove or ignore
     |   equals alignment; defaults to false. DEPRECATED: use options
     |   `operators` and `default` instead
     | - default ('align', 'align_single_space', 'align_single_space_minimal',
     |   'no_space', 'single_space', null): default fix strategy; defaults to
     |   'single_space'
     | - operators (array): dictionary of `binary operator` => `fix strategy`
     |   values that differ from the default strategy; defaults to []
  
   * blank_line_after_namespace [@PSR2, @Symfony, @PhpCsFixer]
     | There MUST be one blank line after the namespace declaration.
  
   * blank_line_after_opening_tag [@Symfony, @PhpCsFixer]
     | Ensure there is no code on the same line as the PHP open tag and it is
     | followed by a blank line.
  
   * blank_line_before_return
     | An empty line feed should precede a return statement. DEPRECATED: use
     | `blank_line_before_statement` instead.
  
   * blank_line_before_statement [@Symfony, @PhpCsFixer]
     | An empty line feed must precede any configured statement.
     |
     | Configuration options:
     | - statements (a subset of ['break', 'case', 'continue', 'declare',
     |   'default', 'die', 'do', 'exit', 'for', 'foreach', 'goto', 'if',
     |   'include', 'include_once', 'require', 'require_once', 'return',
     |   'switch', 'throw', 'try', 'while', 'yield']): list of statements which
     |   must be preceded by an empty line; defaults to ['break', 'continue',
     |   'declare', 'return', 'throw', 'try']
  
   * braces [@PSR2, @Symfony, @PhpCsFixer]
     | The body of each structure MUST be enclosed by braces. Braces should be
     | properly placed. Body of braces should be properly indented.
     |
     | Configuration options:
     | - allow_single_line_closure (bool): whether single line lambda notation
     |   should be allowed; defaults to false
     | - position_after_anonymous_constructs ('next', 'same'): whether the
     |   opening brace should be placed on "next" or "same" line after anonymous
     |   constructs (anonymous classes and lambda functions); defaults to 'same'
     | - position_after_control_structures ('next', 'same'): whether the opening
     |   brace should be placed on "next" or "same" line after control
     |   structures; defaults to 'same'
     | - position_after_functions_and_oop_constructs ('next', 'same'): whether
     |   the opening brace should be placed on "next" or "same" line after
     |   classy constructs (non-anonymous classes, interfaces, traits, methods
     |   and non-lambda functions); defaults to 'next'
  
   * cast_spaces [@Symfony, @PhpCsFixer]
     | A single space or none should be between cast and variable.
     |
     | Configuration options:
     | - space ('none', 'single'): spacing to apply between cast and variable;
     |   defaults to 'single'
  
   * class_attributes_separation [@Symfony, @PhpCsFixer]
     | Class, trait and interface elements must be separated with one blank
     | line.
     |
     | Configuration options:
     | - elements (a subset of ['const', 'method', 'property']): list of classy
     |   elements; 'const', 'method', 'property'; defaults to ['const',
     |   'method', 'property']
  
   * class_definition [@PSR2, @Symfony, @PhpCsFixer]
     | Whitespace around the keywords of a class, trait or interfaces
     | definition should be one space.
     |
     | Configuration options:
     | - multi_line_extends_each_single_line (bool): whether definitions should
     |   be multiline; defaults to false; DEPRECATED alias:
     |   multiLineExtendsEachSingleLine
     | - single_item_single_line (bool): whether definitions should be single
     |   line when including a single item; defaults to false; DEPRECATED alias:
     |   singleItemSingleLine
     | - single_line (bool): whether definitions should be single line; defaults
     |   to false; DEPRECATED alias: singleLine
  
   * class_keyword_remove
     | Converts `::class` keywords to FQCN strings.
  
   * combine_consecutive_issets [@PhpCsFixer]
     | Using `isset($var) &&` multiple times should be done in one call.
  
   * combine_consecutive_unsets [@PhpCsFixer]
     | Calling `unset` on multiple items should be done in one call.
  
   * combine_nested_dirname [@PHP70Migration:risky, @PHP71Migration:risky]
     | Replace multiple nested calls of `dirname` by only one call with second
     | `$level` parameter. Requires PHP >= 7.0.
     | *Risky rule: risky when the function `dirname` is overridden.*
  
   * comment_to_phpdoc [@PhpCsFixer:risky]
     | Comments with annotation should be docblock when used on structural
     | elements.
     | *Risky rule: risky as new docblocks might mean more, e.g. a Doctrine entity might have a new column in database.*
     |
     | Configuration options:
     | - ignored_tags (array): list of ignored tags; defaults to []
  
   * compact_nullable_typehint [@PhpCsFixer]
     | Remove extra spaces in a nullable typehint.
  
   * concat_space [@Symfony, @PhpCsFixer]
     | Concatenation should be spaced according configuration.
     |
     | Configuration options:
     | - spacing ('none', 'one'): spacing to apply around concatenation operator;
     |   defaults to 'none'
  
   * constant_case [@PSR2, @Symfony, @PhpCsFixer]
     | The PHP constants `true`, `false`, and `null` MUST be written using the
     | correct casing.
     |
     | Configuration options:
     | - case ('lower', 'upper'): whether to use the `upper` or `lower` case
     |   syntax; defaults to 'lower'
  
   * date_time_immutable
     | Class `DateTimeImmutable` should be used instead of `DateTime`.
     | *Risky rule: risky when the code relies on modifying `DateTime` objects or if any of the `date_create*` functions are overridden.*
  
   * declare_equal_normalize [@Symfony, @PhpCsFixer]
     | Equal sign in declare statement should be surrounded by spaces or not
     | following configuration.
     |
     | Configuration options:
     | - space ('none', 'single'): spacing to apply around the equal sign;
     |   defaults to 'none'
  
   * declare_strict_types [@PHP70Migration:risky, @PHP71Migration:risky]
     | Force strict types declaration in all files. Requires PHP >= 7.0.
     | *Risky rule: forcing strict types will stop non strict code from working.*
  
   * dir_constant [@Symfony:risky, @PhpCsFixer:risky]
     | Replaces `dirname(__FILE__)` expression with equivalent `__DIR__`
     | constant.
     | *Risky rule: risky when the function `dirname` is overridden.*
  
   * doctrine_annotation_array_assignment [@DoctrineAnnotation]
     | Doctrine annotations must use configured operator for assignment in
     | arrays.
     |
     | Configuration options:
     | - ignored_tags (array): list of tags that must not be treated as Doctrine
     |   Annotations; defaults to ['abstract', 'access', 'code', 'deprec',
     |   'encode', 'exception', 'final', 'ingroup', 'inheritdoc', 'inheritDoc',
     |   'magic', 'name', 'toc', 'tutorial', 'private', 'static', 'staticvar',
     |   'staticVar', 'throw', 'api', 'author', 'category', 'copyright',
     |   'deprecated', 'example', 'filesource', 'global', 'ignore', 'internal',
     |   'license', 'link', 'method', 'package', 'param', 'property',
     |   'property-read', 'property-write', 'return', 'see', 'since', 'source',
     |   'subpackage', 'throws', 'todo', 'TODO', 'usedBy', 'uses', 'var',
     |   'version', 'after', 'afterClass', 'backupGlobals',
     |   'backupStaticAttributes', 'before', 'beforeClass',
     |   'codeCoverageIgnore', 'codeCoverageIgnoreStart',
     |   'codeCoverageIgnoreEnd', 'covers', 'coversDefaultClass',
     |   'coversNothing', 'dataProvider', 'depends', 'expectedException',
     |   'expectedExceptionCode', 'expectedExceptionMessage',
     |   'expectedExceptionMessageRegExp', 'group', 'large', 'medium',
     |   'preserveGlobalState', 'requires', 'runTestsInSeparateProcesses',
     |   'runInSeparateProcess', 'small', 'test', 'testdox', 'ticket', 'uses',
     |   'SuppressWarnings', 'noinspection', 'package_version', 'enduml',
     |   'startuml', 'fix', 'FIXME', 'fixme', 'override']
     | - operator (':', '='): the operator to use; defaults to '='
  
   * doctrine_annotation_braces [@DoctrineAnnotation]
     | Doctrine annotations without arguments must use the configured syntax.
     |
     | Configuration options:
     | - ignored_tags (array): list of tags that must not be treated as Doctrine
     |   Annotations; defaults to ['abstract', 'access', 'code', 'deprec',
     |   'encode', 'exception', 'final', 'ingroup', 'inheritdoc', 'inheritDoc',
     |   'magic', 'name', 'toc', 'tutorial', 'private', 'static', 'staticvar',
     |   'staticVar', 'throw', 'api', 'author', 'category', 'copyright',
     |   'deprecated', 'example', 'filesource', 'global', 'ignore', 'internal',
     |   'license', 'link', 'method', 'package', 'param', 'property',
     |   'property-read', 'property-write', 'return', 'see', 'since', 'source',
     |   'subpackage', 'throws', 'todo', 'TODO', 'usedBy', 'uses', 'var',
     |   'version', 'after', 'afterClass', 'backupGlobals',
     |   'backupStaticAttributes', 'before', 'beforeClass',
     |   'codeCoverageIgnore', 'codeCoverageIgnoreStart',
     |   'codeCoverageIgnoreEnd', 'covers', 'coversDefaultClass',
     |   'coversNothing', 'dataProvider', 'depends', 'expectedException',
     |   'expectedExceptionCode', 'expectedExceptionMessage',
     |   'expectedExceptionMessageRegExp', 'group', 'large', 'medium',
     |   'preserveGlobalState', 'requires', 'runTestsInSeparateProcesses',
     |   'runInSeparateProcess', 'small', 'test', 'testdox', 'ticket', 'uses',
     |   'SuppressWarnings', 'noinspection', 'package_version', 'enduml',
     |   'startuml', 'fix', 'FIXME', 'fixme', 'override']
     | - syntax ('with_braces', 'without_braces'): whether to add or remove
     |   braces; defaults to 'without_braces'
  
   * doctrine_annotation_indentation [@DoctrineAnnotation]
     | Doctrine annotations must be indented with four spaces.
     |
     | Configuration options:
     | - ignored_tags (array): list of tags that must not be treated as Doctrine
     |   Annotations; defaults to ['abstract', 'access', 'code', 'deprec',
     |   'encode', 'exception', 'final', 'ingroup', 'inheritdoc', 'inheritDoc',
     |   'magic', 'name', 'toc', 'tutorial', 'private', 'static', 'staticvar',
     |   'staticVar', 'throw', 'api', 'author', 'category', 'copyright',
     |   'deprecated', 'example', 'filesource', 'global', 'ignore', 'internal',
     |   'license', 'link', 'method', 'package', 'param', 'property',
     |   'property-read', 'property-write', 'return', 'see', 'since', 'source',
     |   'subpackage', 'throws', 'todo', 'TODO', 'usedBy', 'uses', 'var',
     |   'version', 'after', 'afterClass', 'backupGlobals',
     |   'backupStaticAttributes', 'before', 'beforeClass',
     |   'codeCoverageIgnore', 'codeCoverageIgnoreStart',
     |   'codeCoverageIgnoreEnd', 'covers', 'coversDefaultClass',
     |   'coversNothing', 'dataProvider', 'depends', 'expectedException',
     |   'expectedExceptionCode', 'expectedExceptionMessage',
     |   'expectedExceptionMessageRegExp', 'group', 'large', 'medium',
     |   'preserveGlobalState', 'requires', 'runTestsInSeparateProcesses',
     |   'runInSeparateProcess', 'small', 'test', 'testdox', 'ticket', 'uses',
     |   'SuppressWarnings', 'noinspection', 'package_version', 'enduml',
     |   'startuml', 'fix', 'FIXME', 'fixme', 'override']
     | - indent_mixed_lines (bool): whether to indent lines that have content
     |   before closing parenthesis; defaults to false
  
   * doctrine_annotation_spaces [@DoctrineAnnotation]
     | Fixes spaces in Doctrine annotations.
     |
     | Configuration options:
     | - after_argument_assignments (null, bool): whether to add, remove or
     |   ignore spaces after argument assignment operator; defaults to false
     | - after_array_assignments_colon (null, bool): whether to add, remove or
     |   ignore spaces after array assignment `:` operator; defaults to true
     | - after_array_assignments_equals (null, bool): whether to add, remove or
     |   ignore spaces after array assignment `=` operator; defaults to true
     | - around_argument_assignments (bool): whether to fix spaces around
     |   argument assignment operator; defaults to true. DEPRECATED: use options
     |   `before_argument_assignments` and `after_argument_assignments` instead
     | - around_array_assignments (bool): whether to fix spaces around array
     |   assignment operators; defaults to true. DEPRECATED: use options
     |   `before_array_assignments_equals`, `after_array_assignments_equals`,
     |   `before_array_assignments_colon` and `after_array_assignments_colon`
     |   instead
     | - around_commas (bool): whether to fix spaces around commas; defaults to
     |   true
     | - around_parentheses (bool): whether to fix spaces around parentheses;
     |   defaults to true
     | - before_argument_assignments (null, bool): whether to add, remove or
     |   ignore spaces before argument assignment operator; defaults to false
     | - before_array_assignments_colon (null, bool): whether to add, remove or
     |   ignore spaces before array `:` assignment operator; defaults to true
     | - before_array_assignments_equals (null, bool): whether to add, remove or
     |   ignore spaces before array `=` assignment operator; defaults to true
     | - ignored_tags (array): list of tags that must not be treated as Doctrine
     |   Annotations; defaults to ['abstract', 'access', 'code', 'deprec',
     |   'encode', 'exception', 'final', 'ingroup', 'inheritdoc', 'inheritDoc',
     |   'magic', 'name', 'toc', 'tutorial', 'private', 'static', 'staticvar',
     |   'staticVar', 'throw', 'api', 'author', 'category', 'copyright',
     |   'deprecated', 'example', 'filesource', 'global', 'ignore', 'internal',
     |   'license', 'link', 'method', 'package', 'param', 'property',
     |   'property-read', 'property-write', 'return', 'see', 'since', 'source',
     |   'subpackage', 'throws', 'todo', 'TODO', 'usedBy', 'uses', 'var',
     |   'version', 'after', 'afterClass', 'backupGlobals',
     |   'backupStaticAttributes', 'before', 'beforeClass',
     |   'codeCoverageIgnore', 'codeCoverageIgnoreStart',
     |   'codeCoverageIgnoreEnd', 'covers', 'coversDefaultClass',
     |   'coversNothing', 'dataProvider', 'depends', 'expectedException',
     |   'expectedExceptionCode', 'expectedExceptionMessage',
     |   'expectedExceptionMessageRegExp', 'group', 'large', 'medium',
     |   'preserveGlobalState', 'requires', 'runTestsInSeparateProcesses',
     |   'runInSeparateProcess', 'small', 'test', 'testdox', 'ticket', 'uses',
     |   'SuppressWarnings', 'noinspection', 'package_version', 'enduml',
     |   'startuml', 'fix', 'FIXME', 'fixme', 'override']
  
   * elseif [@PSR2, @Symfony, @PhpCsFixer]
     | The keyword `elseif` should be used instead of `else if` so that all
     | control keywords look like single words.
  
   * encoding [@PSR1, @PSR2, @Symfony, @PhpCsFixer]
     | PHP code MUST use only UTF-8 without BOM (remove BOM).
  
   * ereg_to_preg [@Symfony:risky, @PhpCsFixer:risky]
     | Replace deprecated `ereg` regular expression functions with `preg`.
     | *Risky rule: risky if the `ereg` function is overridden.*
  
   * error_suppression [@Symfony:risky, @PhpCsFixer:risky]
     | Error control operator should be added to deprecation notices and/or
     | removed from other cases.
     | *Risky rule: risky because adding/removing `@` might cause changes to code behaviour or if `trigger_error` function is overridden.*
     |
     | Configuration options:
     | - mute_deprecation_error (bool): whether to add `@` in deprecation
     |   notices; defaults to true
     | - noise_remaining_usages (bool): whether to remove `@` in remaining
     |   usages; defaults to false
     | - noise_remaining_usages_exclude (array): list of global functions to
     |   exclude from removing `@`; defaults to []
  
   * escape_implicit_backslashes [@PhpCsFixer]
     | Escape implicit backslashes in strings and heredocs to ease the
     | understanding of which are special chars interpreted by PHP and which
     | not.
     |
     | Configuration options:
     | - double_quoted (bool): whether to fix double-quoted strings; defaults to
     |   true
     | - heredoc_syntax (bool): whether to fix heredoc syntax; defaults to true
     | - single_quoted (bool): whether to fix single-quoted strings; defaults to
     |   false
  
   * explicit_indirect_variable [@PhpCsFixer]
     | Add curly braces to indirect variables to make them clear to understand.
     | Requires PHP >= 7.0.
  
   * explicit_string_variable [@PhpCsFixer]
     | Converts implicit variables into explicit ones in double-quoted strings
     | or heredoc syntax.
  
   * final_class
     | All classes must be final, except abstract ones and Doctrine entities.
     | *Risky rule: risky when subclassing non-abstract classes.*
  
   * final_internal_class [@PhpCsFixer:risky]
     | Internal classes should be `final`.
     | *Risky rule: changing classes to `final` might cause code execution to break.*
     |
     | Configuration options:
     | - annotation-black-list (array): class level annotations tags that must be
     |   omitted to fix the class, even if all of the white list ones are used
     |   as well. (case insensitive); defaults to ['@final', '@Entity',
     |   '@ORM\\Entity']
     | - annotation-white-list (array): class level annotations tags that must be
     |   set in order to fix the class. (case insensitive); defaults to
     |   ['@internal']
     | - consider-absent-docblock-as-internal-class (bool): should classes
     |   without any DocBlock be fixed to final?; defaults to false
  
   * final_public_method_for_abstract_class
     | All public methods of abstract classes should be final.
     | *Risky rule: risky when overriding public methods of abstract classes.*
  
   * final_static_access
     | Converts `static` access to `self` access in final classes.
  
   * fopen_flag_order [@Symfony:risky, @PhpCsFixer:risky]
     | Order the flags in `fopen` calls, `b` and `t` must be last.
     | *Risky rule: risky when the function `fopen` is overridden.*
  
   * fopen_flags [@Symfony:risky, @PhpCsFixer:risky]
     | The flags in `fopen` calls must omit `t`, and `b` must be omitted or
     | included consistently.
     | *Risky rule: risky when the function `fopen` is overridden.*
     |
     | Configuration options:
     | - b_mode (bool): the `b` flag must be used (`true`) or omitted (`false`);
     |   defaults to true
  
   * full_opening_tag [@PSR1, @PSR2, @Symfony, @PhpCsFixer]
     | PHP code must use the long `<?php` tags or short-echo `<?=` tags and not
     | other tag variations.
  
   * fully_qualified_strict_types [@PhpCsFixer]
     | Transforms imported FQCN parameters and return types in function
     | arguments to short version.
  
   * function_declaration [@PSR2, @Symfony, @PhpCsFixer]
     | Spaces should be properly placed in a function declaration.
     |
     | Configuration options:
     | - closure_function_spacing ('none', 'one'): spacing to use before open
     |   parenthesis for closures; defaults to 'one'
  
   * function_to_constant [@Symfony:risky, @PhpCsFixer:risky]
     | Replace core functions calls returning constants with the constants.
     | *Risky rule: risky when any of the configured functions to replace are overridden.*
     |
     | Configuration options:
     | - functions (a subset of ['get_called_class', 'get_class',
     |   'php_sapi_name', 'phpversion', 'pi']): list of function names to fix;
     |   defaults to ['get_class', 'php_sapi_name', 'phpversion', 'pi']
  
   * function_typehint_space [@Symfony, @PhpCsFixer]
     | Ensure single space between function's argument and its typehint.
  
   * general_phpdoc_annotation_remove
     | Configured annotations should be omitted from PHPDoc.
     |
     | Configuration options:
     | - annotations (array): list of annotations to remove, e.g. `["author"]`;
     |   defaults to []
  
   * global_namespace_import
     | Imports or fully qualifies global classes/functions/constants.
     |
     | Configuration options:
     | - import_classes (false, null, true): whether to import, not import or
     |   ignore global classes; defaults to true
     | - import_constants (false, null, true): whether to import, not import or
     |   ignore global constants; defaults to null
     | - import_functions (false, null, true): whether to import, not import or
     |   ignore global functions; defaults to null
  
   * hash_to_slash_comment
     | Single line comments should use double slashes `//` and not hash `#`.
     | DEPRECATED: use `single_line_comment_style` instead.
  
   * header_comment
     | Add, replace or remove header comment.
     |
     | Configuration options:
     | - comment_type ('comment', 'PHPDoc'): comment syntax type; defaults to
     |   'comment'; DEPRECATED alias: commentType
     | - header (string): proper header content; required
     | - location ('after_declare_strict', 'after_open'): the location of the
     |   inserted header; defaults to 'after_declare_strict'
     | - separate ('both', 'bottom', 'none', 'top'): whether the header should be
     |   separated from the file content with a new line; defaults to 'both'
  
   * heredoc_indentation [@PHP73Migration]
     | Heredoc/nowdoc content must be properly indented. Requires PHP >= 7.3.
  
   * heredoc_to_nowdoc [@PhpCsFixer]
     | Convert `heredoc` to `nowdoc` where possible.
  
   * implode_call [@Symfony:risky, @PhpCsFixer:risky]
     | Function `implode` must be called with 2 arguments in the documented
     | order.
     | *Risky rule: risky when the function `implode` is overridden.*
  
   * include [@Symfony, @PhpCsFixer]
     | Include/Require and file path should be divided with a single space.
     | File path should not be placed under brackets.
  
   * increment_style [@Symfony, @PhpCsFixer]
     | Pre- or post-increment and decrement operators should be used if
     | possible.
     |
     | Configuration options:
     | - style ('post', 'pre'): whether to use pre- or post-increment and
     |   decrement operators; defaults to 'pre'
  
   * indentation_type [@PSR2, @Symfony, @PhpCsFixer]
     | Code MUST use configured indentation type.
  
   * is_null [@Symfony:risky, @PhpCsFixer:risky]
     | Replaces `is_null($var)` expression with `null === $var`.
     | *Risky rule: risky when the function `is_null` is overridden.*
     |
     | Configuration options:
     | - use_yoda_style (bool): whether Yoda style conditions should be used;
     |   defaults to true. DEPRECATED: use `yoda_style` fixer instead
  
   * line_ending [@PSR2, @Symfony, @PhpCsFixer]
     | All PHP files must use same line ending.
  
   * linebreak_after_opening_tag
     | Ensure there is no code on the same line as the PHP open tag.
  
   * list_syntax
     | List (`array` destructuring) assignment should be declared using the
     | configured syntax. Requires PHP >= 7.1.
     |
     | Configuration options:
     | - syntax ('long', 'short'): whether to use the `long` or `short` `list`
     |   syntax; defaults to 'long'
  
   * logical_operators [@PhpCsFixer:risky]
     | Use `&&` and `||` logical operators instead of `and` and `or`.
     | *Risky rule: risky, because you must double-check if using and/or with lower precedence was intentional.*
  
   * lowercase_cast [@Symfony, @PhpCsFixer]
     | Cast should be written in lower case.
  
   * lowercase_constants
     | The PHP constants `true`, `false`, and `null` MUST be in lower case.
     | DEPRECATED: use `constant_case` instead.
  
   * lowercase_keywords [@PSR2, @Symfony, @PhpCsFixer]
     | PHP keywords MUST be in lower case.
  
   * lowercase_static_reference [@Symfony, @PhpCsFixer]
     | Class static references `self`, `static` and `parent` MUST be in lower
     | case.
  
   * magic_constant_casing [@Symfony, @PhpCsFixer]
     | Magic constants should be referred to using the correct casing.
  
   * magic_method_casing [@Symfony, @PhpCsFixer]
     | Magic method definitions and calls must be using the correct casing.
  
   * mb_str_functions
     | Replace non multibyte-safe functions with corresponding mb function.
     | *Risky rule: risky when any of the functions are overridden.*
  
   * method_argument_space [@PSR2, @Symfony, @PhpCsFixer]
     | In method arguments and method call, there MUST NOT be a space before
     | each comma and there MUST be one space after each comma. Argument lists
     | MAY be split across multiple lines, where each subsequent line is
     | indented once. When doing so, the first item in the list MUST be on the
     | next line, and there MUST be only one argument per line.
     |
     | Configuration options:
     | - after_heredoc (bool): whether the whitespace between heredoc end and
     |   comma should be removed; defaults to false
     | - ensure_fully_multiline (bool): ensure every argument of a multiline
     |   argument list is on its own line; defaults to false. DEPRECATED: use
     |   option `on_multiline` instead
     | - keep_multiple_spaces_after_comma (bool): whether keep multiple spaces
     |   after comma; defaults to false
     | - on_multiline ('ensure_fully_multiline', 'ensure_single_line', 'ignore'):
     |   defines how to handle function arguments lists that contain newlines;
     |   defaults to 'ignore'
  
   * method_chaining_indentation [@PhpCsFixer]
     | Method chaining MUST be properly indented. Method chaining with
     | different levels of indentation is not supported.
  
   * method_separation
     | Methods must be separated with one blank line. DEPRECATED: use
     | `class_attributes_separation` instead.
  
   * modernize_types_casting [@Symfony:risky, @PhpCsFixer:risky]
     | Replaces `intval`, `floatval`, `doubleval`, `strval` and `boolval`
     | function calls with according type casting operator.
     | *Risky rule: risky if any of the functions `intval`, `floatval`, `doubleval`, `strval` or `boolval` are overridden.*
  
   * multiline_comment_opening_closing [@PhpCsFixer]
     | DocBlocks must start with two asterisks, multiline comments must start
     | with a single asterisk, after the opening slash. Both must end with a
     | single asterisk before the closing slash.
  
   * multiline_whitespace_before_semicolons [@PhpCsFixer]
     | Forbid multi-line whitespace before the closing semicolon or move the
     | semicolon to the new line for chained calls.
     |
     | Configuration options:
     | - strategy ('new_line_for_chained_calls', 'no_multi_line'): forbid
     |   multi-line whitespace or move the semicolon to the new line for chained
     |   calls; defaults to 'no_multi_line'
  
   * native_constant_invocation [@Symfony:risky, @PhpCsFixer:risky]
     | Add leading `\` before constant invocation of internal constant to speed
     | up resolving. Constant name match is case-sensitive, except for `null`,
     | `false` and `true`.
     | *Risky rule: risky when any of the constants are namespaced or overridden.*
     |
     | Configuration options:
     | - exclude (array): list of constants to ignore; defaults to ['null',
     |   'false', 'true']
     | - fix_built_in (bool): whether to fix constants returned by
     |   `get_defined_constants`. User constants are not accounted in this list
     |   and must be specified in the include one; defaults to true
     | - include (array): list of additional constants to fix; defaults to []
     | - scope ('all', 'namespaced'): only fix constant invocations that are made
     |   within a namespace or fix all; defaults to 'all'
  
   * native_function_casing [@Symfony, @PhpCsFixer]
     | Function defined by PHP should be called using the correct casing.
  
   * native_function_invocation [@Symfony:risky, @PhpCsFixer:risky]
     | Add leading `\` before function invocation to speed up resolving.
     | *Risky rule: risky when any of the functions are overridden.*
     |
     | Configuration options:
     | - exclude (array): list of functions to ignore; defaults to []
     | - include (array): list of function names or sets to fix. Defined sets are
     |   `@internal` (all native functions), `@all` (all global functions) and
     |   `@compiler_optimized` (functions that are specially optimized by Zend);
     |   defaults to ['@internal']
     | - scope ('all', 'namespaced'): only fix function calls that are made
     |   within a namespace or fix all; defaults to 'all'
     | - strict (bool): whether leading `\` of function call not meant to have it
     |   should be removed; defaults to false
  
   * native_function_type_declaration_casing [@Symfony, @PhpCsFixer]
     | Native type hints for functions should use the correct case.
  
   * new_with_braces [@Symfony, @PhpCsFixer]
     | All instances created with new keyword must be followed by braces.
  
   * no_alias_functions [@Symfony:risky, @PhpCsFixer:risky]
     | Master functions shall be used instead of aliases.
     | *Risky rule: risky when any of the alias functions are overridden.*
     |
     | Configuration options:
     | - sets (a subset of ['@internal', '@IMAP', '@mbreg', '@all']): list of
     |   sets to fix. Defined sets are `@internal` (native functions), `@IMAP`
     |   (IMAP functions), `@mbreg` (from `ext-mbstring`) `@all` (all listed
     |   sets); defaults to ['@internal', '@IMAP']
  
   * no_alternative_syntax [@PhpCsFixer]
     | Replace control structure alternative syntax to use braces.
  
   * no_binary_string [@PhpCsFixer]
     | There should not be a binary flag before strings.
  
   * no_blank_lines_after_class_opening [@Symfony, @PhpCsFixer]
     | There should be no empty lines after class opening brace.
  
   * no_blank_lines_after_phpdoc [@Symfony, @PhpCsFixer]
     | There should not be blank lines between docblock and the documented
     | element.
  
   * no_blank_lines_before_namespace
     | There should be no blank lines before a namespace declaration.
  
   * no_break_comment [@PSR2, @Symfony, @PhpCsFixer]
     | There must be a comment when fall-through is intentional in a non-empty
     | case body.
     |
     | Configuration options:
     | - comment_text (string): the text to use in the added comment and to
     |   detect it; defaults to 'no break'
  
   * no_closing_tag [@PSR2, @Symfony, @PhpCsFixer]
     | The closing `?>` tag MUST be omitted from files containing only PHP.
  
   * no_empty_comment [@Symfony, @PhpCsFixer]
     | There should not be any empty comments.
  
   * no_empty_phpdoc [@Symfony, @PhpCsFixer]
     | There should not be empty PHPDoc blocks.
  
   * no_empty_statement [@Symfony, @PhpCsFixer]
     | Remove useless semicolon statements.
  
   * no_extra_blank_lines [@Symfony, @PhpCsFixer]
     | Removes extra blank lines and/or blank lines following configuration.
     |
     | Configuration options:
     | - tokens (a subset of ['break', 'case', 'continue', 'curly_brace_block',
     |   'default', 'extra', 'parenthesis_brace_block', 'return',
     |   'square_brace_block', 'switch', 'throw', 'use', 'useTrait',
     |   'use_trait']): list of tokens to fix; defaults to ['extra']
  
   * no_extra_consecutive_blank_lines
     | Removes extra blank lines and/or blank lines following configuration.
     | DEPRECATED: use `no_extra_blank_lines` instead.
     |
     | Configuration options:
     | - tokens (a subset of ['break', 'case', 'continue', 'curly_brace_block',
     |   'default', 'extra', 'parenthesis_brace_block', 'return',
     |   'square_brace_block', 'switch', 'throw', 'use', 'useTrait',
     |   'use_trait']): list of tokens to fix; defaults to ['extra']
  
   * no_homoglyph_names [@Symfony:risky, @PhpCsFixer:risky]
     | Replace accidental usage of homoglyphs (non ascii characters) in names.
     | *Risky rule: renames classes and cannot rename the files. You might have string references to renamed code (`$$name`).*
  
   * no_leading_import_slash [@Symfony, @PhpCsFixer]
     | Remove leading slashes in `use` clauses.
  
   * no_leading_namespace_whitespace [@Symfony, @PhpCsFixer]
     | The namespace declaration line shouldn't contain leading whitespace.
  
   * no_mixed_echo_print [@Symfony, @PhpCsFixer]
     | Either language construct `print` or `echo` should be used.
     |
     | Configuration options:
     | - use ('echo', 'print'): the desired language construct; defaults to
     |   'echo'
  
   * no_multiline_whitespace_around_double_arrow [@Symfony, @PhpCsFixer]
     | Operator `=>` should not be surrounded by multi-line whitespaces.
  
   * no_multiline_whitespace_before_semicolons
     | Multi-line whitespace before closing semicolon are prohibited.
     | DEPRECATED: use `multiline_whitespace_before_semicolons` instead.
  
   * no_null_property_initialization [@PhpCsFixer]
     | Properties MUST not be explicitly initialized with `null` except when
     | they have a type declaration (PHP 7.4).
  
   * no_php4_constructor
     | Convert PHP4-style constructors to `__construct`.
     | *Risky rule: risky when old style constructor being fixed is overridden or overrides parent one.